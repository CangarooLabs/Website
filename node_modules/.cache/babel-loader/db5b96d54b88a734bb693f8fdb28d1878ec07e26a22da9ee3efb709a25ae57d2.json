{"ast":null,"code":"import { getRandom, getRangeValue } from \"tsparticles-engine\";\nimport { Tilt } from \"./Options/Classes/Tilt\";\nimport { updateTilt } from \"./Utils\";\nexport class TiltUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n  getTransformValues(particle) {\n    const tilt = particle.tilt?.enable && particle.tilt;\n    return {\n      b: tilt ? Math.cos(tilt.value) * tilt.cosDirection : undefined,\n      c: tilt ? Math.sin(tilt.value) * tilt.sinDirection : undefined\n    };\n  }\n  init(particle) {\n    const tiltOptions = particle.options.tilt;\n    if (!tiltOptions) {\n      return;\n    }\n    particle.tilt = {\n      enable: tiltOptions.enable,\n      value: getRangeValue(tiltOptions.value) * Math.PI / 180,\n      sinDirection: getRandom() >= 0.5 ? 1 : -1,\n      cosDirection: getRandom() >= 0.5 ? 1 : -1\n    };\n    let tiltDirection = tiltOptions.direction;\n    if (tiltDirection === \"random\") {\n      const index = Math.floor(getRandom() * 2);\n      tiltDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n    }\n    switch (tiltDirection) {\n      case \"counter-clockwise\":\n      case \"counterClockwise\":\n        particle.tilt.status = \"decreasing\";\n        break;\n      case \"clockwise\":\n        particle.tilt.status = \"increasing\";\n        break;\n    }\n    const tiltAnimation = particle.options.tilt?.animation;\n    if (tiltAnimation?.enable) {\n      particle.tilt.decay = 1 - getRangeValue(tiltAnimation.decay);\n      particle.tilt.velocity = getRangeValue(tiltAnimation.speed) / 360 * this.container.retina.reduceFactor;\n      if (!tiltAnimation.sync) {\n        particle.tilt.velocity *= getRandom();\n      }\n    }\n  }\n  isEnabled(particle) {\n    const tiltAnimation = particle.options.tilt?.animation;\n    return !particle.destroyed && !particle.spawning && !!tiltAnimation?.enable;\n  }\n  loadOptions(options, ...sources) {\n    if (!options.tilt) {\n      options.tilt = new Tilt();\n    }\n    for (const source of sources) {\n      options.tilt.load(source?.tilt);\n    }\n  }\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n    updateTilt(particle, delta);\n  }\n}","map":{"version":3,"names":["getRandom","getRangeValue","Tilt","updateTilt","TiltUpdater","constructor","container","getTransformValues","particle","tilt","enable","b","Math","cos","value","cosDirection","undefined","c","sin","sinDirection","init","tiltOptions","options","PI","tiltDirection","direction","index","floor","status","tiltAnimation","animation","decay","velocity","speed","retina","reduceFactor","sync","isEnabled","destroyed","spawning","loadOptions","sources","source","load","update","delta"],"sources":["C:/Users/User/Desktop/Cangaroo Labs/Website/node_modules/tsparticles-updater-tilt/esm/TiltUpdater.js"],"sourcesContent":["import { getRandom, getRangeValue, } from \"tsparticles-engine\";\r\nimport { Tilt } from \"./Options/Classes/Tilt\";\r\nimport { updateTilt } from \"./Utils\";\r\nexport class TiltUpdater {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    getTransformValues(particle) {\r\n        const tilt = particle.tilt?.enable && particle.tilt;\r\n        return {\r\n            b: tilt ? Math.cos(tilt.value) * tilt.cosDirection : undefined,\r\n            c: tilt ? Math.sin(tilt.value) * tilt.sinDirection : undefined,\r\n        };\r\n    }\r\n    init(particle) {\r\n        const tiltOptions = particle.options.tilt;\r\n        if (!tiltOptions) {\r\n            return;\r\n        }\r\n        particle.tilt = {\r\n            enable: tiltOptions.enable,\r\n            value: (getRangeValue(tiltOptions.value) * Math.PI) / 180,\r\n            sinDirection: getRandom() >= 0.5 ? 1 : -1,\r\n            cosDirection: getRandom() >= 0.5 ? 1 : -1,\r\n        };\r\n        let tiltDirection = tiltOptions.direction;\r\n        if (tiltDirection === \"random\") {\r\n            const index = Math.floor(getRandom() * 2);\r\n            tiltDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\r\n        }\r\n        switch (tiltDirection) {\r\n            case \"counter-clockwise\":\r\n            case \"counterClockwise\":\r\n                particle.tilt.status = \"decreasing\";\r\n                break;\r\n            case \"clockwise\":\r\n                particle.tilt.status = \"increasing\";\r\n                break;\r\n        }\r\n        const tiltAnimation = particle.options.tilt?.animation;\r\n        if (tiltAnimation?.enable) {\r\n            particle.tilt.decay = 1 - getRangeValue(tiltAnimation.decay);\r\n            particle.tilt.velocity = (getRangeValue(tiltAnimation.speed) / 360) * this.container.retina.reduceFactor;\r\n            if (!tiltAnimation.sync) {\r\n                particle.tilt.velocity *= getRandom();\r\n            }\r\n        }\r\n    }\r\n    isEnabled(particle) {\r\n        const tiltAnimation = particle.options.tilt?.animation;\r\n        return !particle.destroyed && !particle.spawning && !!tiltAnimation?.enable;\r\n    }\r\n    loadOptions(options, ...sources) {\r\n        if (!options.tilt) {\r\n            options.tilt = new Tilt();\r\n        }\r\n        for (const source of sources) {\r\n            options.tilt.load(source?.tilt);\r\n        }\r\n    }\r\n    update(particle, delta) {\r\n        if (!this.isEnabled(particle)) {\r\n            return;\r\n        }\r\n        updateTilt(particle, delta);\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,aAAa,QAAS,oBAAoB;AAC9D,SAASC,IAAI,QAAQ,wBAAwB;AAC7C,SAASC,UAAU,QAAQ,SAAS;AACpC,OAAO,MAAMC,WAAW,CAAC;EACrBC,WAAWA,CAACC,SAAS,EAAE;IACnB,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC9B;EACAC,kBAAkBA,CAACC,QAAQ,EAAE;IACzB,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAI,EAAEC,MAAM,IAAIF,QAAQ,CAACC,IAAI;IACnD,OAAO;MACHE,CAAC,EAAEF,IAAI,GAAGG,IAAI,CAACC,GAAG,CAACJ,IAAI,CAACK,KAAK,CAAC,GAAGL,IAAI,CAACM,YAAY,GAAGC,SAAS;MAC9DC,CAAC,EAAER,IAAI,GAAGG,IAAI,CAACM,GAAG,CAACT,IAAI,CAACK,KAAK,CAAC,GAAGL,IAAI,CAACU,YAAY,GAAGH;IACzD,CAAC;EACL;EACAI,IAAIA,CAACZ,QAAQ,EAAE;IACX,MAAMa,WAAW,GAAGb,QAAQ,CAACc,OAAO,CAACb,IAAI;IACzC,IAAI,CAACY,WAAW,EAAE;MACd;IACJ;IACAb,QAAQ,CAACC,IAAI,GAAG;MACZC,MAAM,EAAEW,WAAW,CAACX,MAAM;MAC1BI,KAAK,EAAGb,aAAa,CAACoB,WAAW,CAACP,KAAK,CAAC,GAAGF,IAAI,CAACW,EAAE,GAAI,GAAG;MACzDJ,YAAY,EAAEnB,SAAS,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;MACzCe,YAAY,EAAEf,SAAS,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC;IAC5C,CAAC;IACD,IAAIwB,aAAa,GAAGH,WAAW,CAACI,SAAS;IACzC,IAAID,aAAa,KAAK,QAAQ,EAAE;MAC5B,MAAME,KAAK,GAAGd,IAAI,CAACe,KAAK,CAAC3B,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;MACzCwB,aAAa,GAAGE,KAAK,GAAG,CAAC,GAAG,mBAAmB,GAAG,WAAW;IACjE;IACA,QAAQF,aAAa;MACjB,KAAK,mBAAmB;MACxB,KAAK,kBAAkB;QACnBhB,QAAQ,CAACC,IAAI,CAACmB,MAAM,GAAG,YAAY;QACnC;MACJ,KAAK,WAAW;QACZpB,QAAQ,CAACC,IAAI,CAACmB,MAAM,GAAG,YAAY;QACnC;IACR;IACA,MAAMC,aAAa,GAAGrB,QAAQ,CAACc,OAAO,CAACb,IAAI,EAAEqB,SAAS;IACtD,IAAID,aAAa,EAAEnB,MAAM,EAAE;MACvBF,QAAQ,CAACC,IAAI,CAACsB,KAAK,GAAG,CAAC,GAAG9B,aAAa,CAAC4B,aAAa,CAACE,KAAK,CAAC;MAC5DvB,QAAQ,CAACC,IAAI,CAACuB,QAAQ,GAAI/B,aAAa,CAAC4B,aAAa,CAACI,KAAK,CAAC,GAAG,GAAG,GAAI,IAAI,CAAC3B,SAAS,CAAC4B,MAAM,CAACC,YAAY;MACxG,IAAI,CAACN,aAAa,CAACO,IAAI,EAAE;QACrB5B,QAAQ,CAACC,IAAI,CAACuB,QAAQ,IAAIhC,SAAS,CAAC,CAAC;MACzC;IACJ;EACJ;EACAqC,SAASA,CAAC7B,QAAQ,EAAE;IAChB,MAAMqB,aAAa,GAAGrB,QAAQ,CAACc,OAAO,CAACb,IAAI,EAAEqB,SAAS;IACtD,OAAO,CAACtB,QAAQ,CAAC8B,SAAS,IAAI,CAAC9B,QAAQ,CAAC+B,QAAQ,IAAI,CAAC,CAACV,aAAa,EAAEnB,MAAM;EAC/E;EACA8B,WAAWA,CAAClB,OAAO,EAAE,GAAGmB,OAAO,EAAE;IAC7B,IAAI,CAACnB,OAAO,CAACb,IAAI,EAAE;MACfa,OAAO,CAACb,IAAI,GAAG,IAAIP,IAAI,CAAC,CAAC;IAC7B;IACA,KAAK,MAAMwC,MAAM,IAAID,OAAO,EAAE;MAC1BnB,OAAO,CAACb,IAAI,CAACkC,IAAI,CAACD,MAAM,EAAEjC,IAAI,CAAC;IACnC;EACJ;EACAmC,MAAMA,CAACpC,QAAQ,EAAEqC,KAAK,EAAE;IACpB,IAAI,CAAC,IAAI,CAACR,SAAS,CAAC7B,QAAQ,CAAC,EAAE;MAC3B;IACJ;IACAL,UAAU,CAACK,QAAQ,EAAEqC,KAAK,CAAC;EAC/B;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}